<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Steerability | Pavlo Melnyk</title>
    <link>/tags/steerability/</link>
      <atom:link href="/tags/steerability/index.xml" rel="self" type="application/rss+xml" />
    <description>Steerability</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Tue, 19 Jul 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/media/icon_hu10934838655842282239.png</url>
      <title>Steerability</title>
      <link>/tags/steerability/</link>
    </image>
    
    <item>
      <title>Steerable 3D Spherical Neurons</title>
      <link>/publication/steerneur/</link>
      <pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate>
      <guid>/publication/steerneur/</guid>
      <description>&lt;p&gt;&lt;span style=&#34;display:none;&#34;&gt; Emerging from low-level vision theory, steerable filters found their counterpart in prior work on steerable convolutional neural networks equivariant to rigid transformations. In our work, we propose a steerable feed-forward learning-based approach that consists of neurons with spherical decision surfaces and operates on point clouds. Such spherical neurons are obtained by conformal embedding of Euclidean space and have recently been revisited in the context of learning representations of point sets. Focusing on 3D geometry, we exploit the isometry property of spherical neurons and derive a 3D steerability constraint. After training spherical neurons to classify point clouds in a canonical orientation, we use a tetrahedron basis to quadruplicate the neurons and construct rotation-equivariant spherical filter banks. We then apply the derived constraint to interpolate the filter bank outputs and, thus, obtain a rotation-invariant network. Finally, we use a synthetic point set and real-world 3D skeleton data to verify our theoretical findings. &lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
